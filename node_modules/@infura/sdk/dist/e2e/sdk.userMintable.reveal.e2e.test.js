"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dotenv_1 = require("dotenv");
var Auth_1 = __importDefault(require("../src/lib/Auth/Auth"));
var sdk_1 = require("../src/lib/SDK/sdk");
var constants_1 = require("../src/lib/constants");
var src_1 = require("../src");
var utils_1 = __importDefault(require("./utils/utils.ts/utils"));
(0, dotenv_1.config)();
var ownerAddress = process.env.WALLET_PUBLIC_ADDRESS
    ? process.env.WALLET_PUBLIC_ADDRESS
    : '0x3bE0Ec232d2D9B3912dE6f1ff941CB499db4eCe7';
// const tokenURI: string = 'https://';
var authInfo = {
    privateKey: process.env.WALLET_PRIVATE_KEY,
    projectId: process.env.INFURA_PROJECT_ID,
    secretId: process.env.INFURA_PROJECT_SECRET,
    rpcUrl: process.env.EVM_RPC_URL,
    chainId: 80001,
    ipfs: {
        projectId: process.env.INFURA_IPFS_PROJECT_ID,
        apiKeySecret: process.env.INFURA_IPFS_PROJECT_SECRET,
    },
};
var acc = new Auth_1.default(authInfo);
var sdk = new sdk_1.SDK(acc);
var unrevealedMetadata;
var revealedMetadata;
var storeMetadata;
// jest.retryTimes(2, { logErrorsBeforeRetry: true });
describe('SDK - contract interaction (deploy, load and mint)', function () {
    jest.setTimeout(60 * 1000 * 5);
    it('Deploy - Get all nfts by owner address', function () { return __awaiter(void 0, void 0, void 0, function () {
        var collectionMetadata, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, response, erc721UserMintable, tx, tx1Minted, tx2Minted, token0, token1, txResponse, nftList, tokensMinted, token0Minted, token1Minted, token0Metadata, token1Metadata;
        var _s, _t, _u, _v, _w, _x, _y;
        return __generator(this, function (_z) {
            switch (_z.label) {
                case 0:
                    _b = (_a = src_1.Metadata).openSeaCollectionLevelStandard;
                    _s = {
                        name: 'My awesome collection',
                        description: "A long description explaining why it's awesome"
                    };
                    return [4 /*yield*/, sdk.storeFile({
                            metadata: 'https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png',
                        })];
                case 1:
                    collectionMetadata = _b.apply(_a, [(_s.image = _z.sent(),
                            _s.external_link = 'https://myawesomewebsite.net',
                            _s)]);
                    // eslint-disable-next-line no-console
                    console.log('collectionMetadata ----', collectionMetadata);
                    return [4 /*yield*/, sdk.storeMetadata({ metadata: collectionMetadata })];
                case 2:
                    storeMetadata = _z.sent();
                    _d = (_c = sdk).createFolder;
                    _t = {};
                    _f = (_e = src_1.Metadata).openSeaTokenLevelStandard;
                    _u = {
                        description: 'Friendly OpenSea Creature that enjoys long swims in the ocean.',
                        external_url: 'https://openseacreatures.io/3'
                    };
                    return [4 /*yield*/, sdk.storeFile({
                            metadata: 'https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png',
                        })];
                case 3:
                    _g = [
                        _f.apply(_e, [(_u.image = _z.sent(),
                                _u.name = 'Dave Starbelly',
                                _u.attributes = [{ trait_type: 'type', value: 'unrevealed' }],
                                _u)])
                    ];
                    _j = (_h = src_1.Metadata).openSeaTokenLevelStandard;
                    _v = {
                        description: 'Friendly OpenSea Creature that enjoys long swims in the ocean.',
                        external_url: 'https://openseacreatures.io/3'
                    };
                    return [4 /*yield*/, sdk.storeFile({
                            metadata: 'https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png',
                        })];
                case 4: return [4 /*yield*/, _d.apply(_c, [(_t.metadata = _g.concat([
                            _j.apply(_h, [(_v.image = _z.sent(),
                                    _v.name = 'Dave Starbelly',
                                    _v.attributes = [{ trait_type: 'type', value: 'unrevealed' }],
                                    _v)])
                        ]),
                            _t.isErc1155 = false,
                            _t)])];
                case 5:
                    unrevealedMetadata = _z.sent();
                    _l = (_k = sdk).createFolder;
                    _w = {};
                    _o = (_m = src_1.Metadata).openSeaTokenLevelStandard;
                    _x = {
                        description: 'Friendly OpenSea Creature that enjoys long swims in the ocean.',
                        external_url: 'https://openseacreatures.io/3'
                    };
                    return [4 /*yield*/, sdk.storeFile({
                            metadata: 'https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png',
                        })];
                case 6:
                    _p = [
                        _o.apply(_m, [(_x.image = _z.sent(),
                                _x.name = 'Dave Starbelly',
                                _x.attributes = [{ trait_type: 'type', value: 'revealed' }],
                                _x)])
                    ];
                    _r = (_q = src_1.Metadata).openSeaTokenLevelStandard;
                    _y = {
                        description: 'Friendly OpenSea Creature that enjoys long swims in the ocean.',
                        external_url: 'https://openseacreatures.io/3'
                    };
                    return [4 /*yield*/, sdk.storeFile({
                            metadata: 'https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png',
                        })];
                case 7: return [4 /*yield*/, _l.apply(_k, [(_w.metadata = _p.concat([
                            _r.apply(_q, [(_y.image = _z.sent(),
                                    _y.name = 'Dave Starbelly',
                                    _y.attributes = [{ trait_type: 'type', value: 'revealed' }],
                                    _y)])
                        ]),
                            _w.isErc1155 = false,
                            _w)])];
                case 8:
                    revealedMetadata = _z.sent();
                    return [4 /*yield*/, sdk.api.getNFTs({
                            publicAddress: ownerAddress,
                            includeMetadata: false,
                        })];
                case 9:
                    response = _z.sent();
                    return [4 /*yield*/, sdk.deploy({
                            template: constants_1.TEMPLATES.ERC721UserMintable,
                            params: {
                                name: 'Payable Mint Contract',
                                symbol: 'PYMC',
                                contractURI: storeMetadata,
                                baseURI: unrevealedMetadata,
                                maxSupply: 10,
                                price: '0.00001',
                                maxTokenRequest: 1,
                            },
                        })];
                case 10:
                    erc721UserMintable = _z.sent();
                    // eslint-disable-next-line no-console
                    console.log('Contract ERC721 UserMintable', erc721UserMintable.contractAddress);
                    return [4 /*yield*/, erc721UserMintable.toggleSale()];
                case 11:
                    tx = _z.sent();
                    return [4 /*yield*/, tx.wait()];
                case 12:
                    _z.sent();
                    return [4 /*yield*/, erc721UserMintable.mint({
                            quantity: 1,
                            cost: '0.00002',
                        })];
                case 13:
                    tx1Minted = _z.sent();
                    return [4 /*yield*/, tx1Minted.wait()];
                case 14:
                    _z.sent();
                    // eslint-disable-next-line no-console
                    console.log('mintedNFT 1');
                    return [4 /*yield*/, erc721UserMintable.mint({
                            quantity: 1,
                            cost: '0.00002',
                        })];
                case 15:
                    tx2Minted = _z.sent();
                    return [4 /*yield*/, tx2Minted.wait()];
                case 16:
                    _z.sent();
                    return [4 /*yield*/, (0, utils_1.default)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var resp, newContractCollection;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, sdk.api.getNFTs({ publicAddress: ownerAddress, includeMetadata: true })];
                                    case 1:
                                        resp = _a.sent();
                                        return [4 /*yield*/, resp.assets.filter(function (asset) {
                                                return asset.contract.toLowerCase() === erc721UserMintable.contractAddress.toLowerCase();
                                            })[0]];
                                    case 2:
                                        newContractCollection = _a.sent();
                                        return [2 /*return*/, (resp.total > response.total &&
                                                newContractCollection !== null &&
                                                newContractCollection.metadata !== null)];
                                }
                            });
                        }); }, 300000, 1000, 'Waiting for NFT collection to be available for an user')];
                case 17:
                    _z.sent();
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '0',
                        })];
                case 18:
                    token0 = _z.sent();
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '1',
                        })];
                case 19:
                    token1 = _z.sent();
                    expect(token0.metadata.name).toEqual('Dave Starbelly');
                    expect(token0.metadata.description).toEqual('Friendly OpenSea Creature that enjoys long swims in the ocean.');
                    expect(token0.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'unrevealed' });
                    expect(token1.metadata.name).toEqual('Dave Starbelly');
                    expect(token1.metadata.description).toEqual('Friendly OpenSea Creature that enjoys long swims in the ocean.');
                    expect(token1.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'unrevealed' });
                    // eslint-disable-next-line no-console
                    console.log('Calling reveal');
                    return [4 /*yield*/, erc721UserMintable.reveal({ baseURI: revealedMetadata })];
                case 20:
                    txResponse = _z.sent();
                    return [4 /*yield*/, txResponse.wait()];
                case 21:
                    _z.sent();
                    // eslint-disable-next-line no-console
                    console.log('Calling getTokenMetadata1');
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '0',
                        })];
                case 22:
                    token0 = _z.sent();
                    // eslint-disable-next-line no-console
                    console.log('Calling getTokenMetadata2');
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '1',
                        })];
                case 23:
                    token1 = _z.sent();
                    expect(token0.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'unrevealed' });
                    expect(token1.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'unrevealed' });
                    // eslint-disable-next-line no-console
                    console.log('Calling getTokenMetadata0 with resync');
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '0',
                            resyncMetadata: true,
                        })];
                case 24:
                    token0 = _z.sent();
                    expect(token0.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'revealed' });
                    // eslint-disable-next-line no-console
                    console.log('Calling getTokenMetadata1 with resync false');
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '1',
                        })];
                case 25:
                    token1 = _z.sent();
                    // eslint-disable-next-line no-console
                    console.log(token0);
                    // eslint-disable-next-line no-console
                    console.log(token1);
                    expect(token1.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'unrevealed' });
                    return [4 /*yield*/, sdk.api.getTokenMetadata({
                            contractAddress: erc721UserMintable.contractAddress.toLowerCase(),
                            tokenId: '1',
                            resyncMetadata: true,
                        })];
                case 26:
                    token1 = _z.sent();
                    expect(token1.metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'revealed' });
                    return [4 /*yield*/, (0, utils_1.default)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var nftList, tokensMinted, token0Minted, token1Minted, token0Metadata, token1Metadata;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, sdk.api.getNFTs({
                                            publicAddress: ownerAddress,
                                            includeMetadata: true,
                                        })];
                                    case 1:
                                        nftList = _a.sent();
                                        tokensMinted = nftList.assets.filter(function (asset) {
                                            return asset.contract.toLowerCase() === erc721UserMintable.contractAddress.toLowerCase();
                                        });
                                        return [4 /*yield*/, tokensMinted.filter(function (token) { return token.tokenId === '0'; })[0]];
                                    case 2:
                                        token0Minted = _a.sent();
                                        return [4 /*yield*/, tokensMinted.filter(function (token) { return token.tokenId === '1'; })[0]];
                                    case 3:
                                        token1Minted = _a.sent();
                                        token0Metadata = token0Minted.metadata;
                                        token1Metadata = token1Minted.metadata;
                                        // eslint-disable-next-line no-console
                                        console.log(token0Metadata);
                                        // eslint-disable-next-line no-console
                                        console.log(token1Metadata);
                                        return [2 /*return*/, (token0Metadata.attributes[0].value === 'revealed' &&
                                                token1Metadata.attributes[0].value === 'revealed')];
                                }
                            });
                        }); }, 300000, 1000, 'Waiting for NFT collection to be available for an user')];
                case 27:
                    _z.sent();
                    return [4 /*yield*/, sdk.api.getNFTs({
                            publicAddress: ownerAddress,
                            includeMetadata: true,
                        })];
                case 28:
                    nftList = _z.sent();
                    tokensMinted = nftList.assets.filter(function (asset) { return asset.contract.toLowerCase() === erc721UserMintable.contractAddress.toLowerCase(); });
                    return [4 /*yield*/, tokensMinted.filter(function (token) { return token.tokenId === '0'; })[0]];
                case 29:
                    token0Minted = _z.sent();
                    return [4 /*yield*/, tokensMinted.filter(function (token) { return token.tokenId === '1'; })[0]];
                case 30:
                    token1Minted = _z.sent();
                    token0Metadata = token0Minted.metadata;
                    token1Metadata = token1Minted.metadata;
                    // eslint-disable-next-line no-console
                    console.log(token0Metadata);
                    // eslint-disable-next-line no-console
                    console.log(token1Metadata);
                    expect(token0Metadata.attributes[0]).toEqual({ trait_type: 'type', value: 'revealed' });
                    expect(token1Metadata.attributes[0]).toEqual({
                        trait_type: 'type',
                        value: 'revealed',
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=sdk.userMintable.reveal.e2e.test.js.map